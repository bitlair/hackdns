#! /usr/bin/env python

import hashlib
import subprocess
import sys
import external
import socket
from StringIO import StringIO
try:
    from M2Crypto import BIO, RSA
    import dns.resolver
except ImportError:
    print >>sys.stderr, 'Have read README?'
    sys.exit(1)
from django.conf import settings
from hackdns.root.models import Server

def get_resolver(server):
    resolver = dns.resolver.Resolver()
    resolver.reset()
    resolver.read_resolv_conf(StringIO('nameserver %s\n' % (server.ipv4,)))
    return resolver

def test_keys(server):
    resolver = get_resolver(server)
    bio  = BIO.MemoryBuffer(str(server.key_private))
    rsa  = RSA.load_key_bio(bio)
    test = 'hackdns.eu testing 123'
    sigs = rsa.sign(test, 'sha1')
    bio1 = BIO.MemoryBuffer(str(server.key_public))
    rsa1 = RSA.load_pub_key_bio(bio1)
    bio2 = BIO.MemoryBuffer()

    answers = resolver.query('keys.root.hack', 'TXT')
    for answer in answers:
        try:
            text = str(answer).strip('"').replace('" "', '\n')
            pkey = '-----BEGIN PUBLIC KEY-----\n%s\n-----END PUBLIC KEY-----' % (text,)
            print pkey
            bio2.flush()
            bio2.write(pkey)
            rsa2 = RSA.load_pub_key_bio(bio2)
            if rsa2.verify(test, sigs, 'sha1'):
                print 'Nameserver public key verified OK'
            else:
                print >>sys.stderr, 'Namserver public key verification failed'
        except M2Crypto.RSA.RSAError, e:
            print >>sys.stderr, 'Nameserver public key verification failed:', str(e)


def run():
    try:
        server = Server.self()
    except Server.DoesNotExist:
        print >>sys.stderr, 'Server not yet configured (run server-bootstrap)'
        return 1

    test_keys(server)

if __name__ == '__main__':
    try:
        sys.exit(run())
    except KeyboardInterrupt:
        print >>sys.stderr, '\nServer configuration aborted!'
        sys.exit(1)


